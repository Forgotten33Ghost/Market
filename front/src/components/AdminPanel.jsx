import React, { useEffect, useState } from "react";
import axios from "axios";
import "../styles/AdminPanel.css";

function AdminPanel({ token }) {
  const asItemsArray = (data) => {
    if (Array.isArray(data)) return data;
    if (data && Array.isArray(data.items)) return data.items;
    return [];
  };
  const asArray = (data) => (Array.isArray(data) ? data : []);

  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [editingProduct, setEditingProduct] = useState(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [newCategory, setNewCategory] = useState("");

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    price: "",
    categoryID: "",
    available: false,
    buyUrl: "",
  });
  const [file, setFile] = useState(null);

  useEffect(() => {
    fetchProducts();
    fetchCategories();
  }, []);

  const fetchProducts = async () => {
    try {
      const res = await axios.get("http://localhost:8080/api/read", {
        params: { page: 1, page_size: 1000 },
      });
      setProducts(asItemsArray(res.data));
    } catch {
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤");
      setProducts([]);
    }
  };

  const fetchCategories = async () => {
    try {
      const res = await axios.get("http://localhost:8080/api/categories");
      setCategories(asArray(res.data));
    } catch {
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
      setCategories([]);
    }
  };

  const handleCreateClick = () => {
    setFormData({
      name: "",
      description: "",
      price: "",
      categoryID: "",
      available: false,
      buyUrl: "",
    });
    setFile(null);
    setIsCreateModalOpen(true);
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleFileChange = (e) => setFile(e.target.files[0] || null);

  const handleCreateCategory = async () => {
    if (!newCategory.trim()) return alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
    try {
      await axios.post(
        "http://localhost:8080/api/admin/category/create",
        { name: newCategory },
        { headers: { "X-Admin-Token": token } }
      );
      setNewCategory("");
      fetchCategories();
    } catch {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
    }
  };

  const handleDeleteCategory = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?")) return;
    try {
      await axios.post(
        "http://localhost:8080/api/admin/category/delete",
        { id },
        { headers: { "X-Admin-Token": token } }
      );
      fetchCategories();
    } catch {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
    }
  };

  const handleCreateSubmit = async (e) => {
    e.preventDefault();
    try {
      const data = new FormData();
      data.append("name", formData.name);
      data.append("description", formData.description);
      data.append("price", formData.price);
      data.append("categoryID", formData.categoryID);
      data.append("available", String(formData.available));
      data.append("buy_url", formData.buyUrl);
      if (file) data.append("file", file);

      await axios.post("http://localhost:8080/api/admin/create", data, {
        headers: {
          "X-Admin-Token": token,
          "Content-Type": "multipart/form-data",
        },
      });

      setIsCreateModalOpen(false);
      fetchProducts();
    } catch {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
    }
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    try {
      const data = new FormData();
      data.append("id", editingProduct.id);
      data.append("name", formData.name);
      data.append("description", formData.description);
      data.append("price", formData.price);
      data.append("categoryID", formData.categoryID);
      data.append("available", String(formData.available));
      data.append("buy_url", formData.buyUrl);
      if (file) data.append("file", file);

      await axios.post("http://localhost:8080/api/admin/update", data, {
        headers: {
          "X-Admin-Token": token,
          "Content-Type": "multipart/form-data",
        },
      });

      setEditingProduct(null);
      fetchProducts();
    } catch {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
    }
  };

  const handleDeleteClick = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?")) return;
    try {
      await axios.post(
        "http://localhost:8080/api/admin/delete",
        { id },
        { headers: { "X-Admin-Token": token } }
      );
      setProducts((prev) => prev.filter((p) => p.id !== id));
    } catch {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
    }
  };

  const openEditModal = (product) => {
    setEditingProduct(product);
    setFormData({
      name: product.name ?? "",
      description: product.description ?? "",
      price: String(product.price ?? ""),
      categoryID: String(product.categoryID ?? ""),
      available: Boolean(product.available),
      buyUrl: product.buyUrl ?? "",
    });
    setFile(null);
  };

  const closeModal = () => {
    setIsCreateModalOpen(false);
    setEditingProduct(null);
  };

  const modalTitle = isCreateModalOpen ? "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞";

  return (
    <div className="admin-panel">
      <h1>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>

      <div className="categories-section">
        <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <div className="categories-list">
          {(categories || []).map((c) => (
            <div key={c.id} className="category-item">
              <span>{c.id}. {c.name}</span>
              <button className="delete-cat-btn" onClick={() => handleDeleteCategory(c.id)}>√ó</button>
            </div>
          ))}
        </div>

        <div className="category-create">
          <input
            type="text"
            value={newCategory}
            onChange={(e) => setNewCategory(e.target.value)}
            placeholder="–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
          />
          <button className="add-button" onClick={handleCreateCategory}>–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
        </div>
      </div>

      <button onClick={handleCreateClick} className="add-button">
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      </button>

      <table className="products-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–¶–µ–Ω–∞</th>
            <th>–í –Ω–∞–ª–∏—á–∏–∏</th>
            <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
            <th>–ö—É–ø–∏—Ç—å URL</th>
            <th>–ö–∞—Ä—Ç–∏–Ω–∫–∞</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {(products || []).map((p) => (
            <tr key={p.id}>
              <td>{p.id}</td>
              <td>{p.name}</td>
              <td>{p.price} ‚ÇΩ</td>
              <td>{p.available ? "–î–∞" : "–ù–µ—Ç"}</td>
              <td>{(categories || []).find((c) => Number(c.id) === Number(p.categoryID))?.name || "-"}</td>
              <td>{p.buyUrl ? <a href={p.buyUrl} target="_blank" rel="noreferrer">üîó</a> : "-"}</td>
              <td>
                <img
                  src={p.url || `http://localhost:8080/uploads/${p.id}.jpg`}
                  alt="preview"
                  style={{ width: 60, height: 60, objectFit: "cover" }}
                  onError={(e) => (e.currentTarget.style.display = "none")}
                />
              </td>
              <td>
                <button onClick={() => openEditModal(p)} className="edit-button">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onClick={() => handleDeleteClick(p.id)} className="delete-button">–£–¥–∞–ª–∏—Ç—å</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {(isCreateModalOpen || editingProduct) && (
        <div className="modal">
          <div className="modal-content">
            <h3>{modalTitle}</h3>
            <form onSubmit={isCreateModalOpen ? handleCreateSubmit : handleEditSubmit}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                <input type="text" name="name" value={formData.name} onChange={handleInputChange} required />
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                <textarea name="description" value={formData.description} onChange={handleInputChange} rows={3} />
              </div>

              <div className="form-group">
                <label>–¶–µ–Ω–∞:</label>
                <input type="number" name="price" value={formData.price} onChange={handleInputChange} required />
              </div>

              <div className="form-group">
                <label>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (Buy URL):</label>
                <input
                  type="text"
                  name="buyUrl"
                  value={formData.buyUrl}
                  onChange={handleInputChange}
                  placeholder="https://example.com/item"
                />
              </div>

              <div className="form-group">
                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                <select name="categoryID" value={formData.categoryID} onChange={handleInputChange} required>
                  <option value="">-- –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é --</option>
                  {(categories || []).map((c) => (
                    <option key={c.id} value={String(c.id)}>
                      {c.id}. {c.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group checkbox">
                <label>
                  <input type="checkbox" name="available" checked={formData.available} onChange={handleInputChange} />
                  –í –Ω–∞–ª–∏—á–∏–∏
                </label>
              </div>

              <div className="form-group">
                <label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
                <input type="file" accept="image/*" onChange={handleFileChange} />
                {editingProduct && (
                  <small>
                    –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:{" "}
                    <a
                      href={editingProduct.url || `http://localhost:8080/uploads/${editingProduct.id}.jpg`}
                      target="_blank"
                      rel="noreferrer"
                    >
                      –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                    </a>
                  </small>
                )}
              </div>

              <div className="form-actions">
                <button type="submit">{isCreateModalOpen ? "–°–æ–∑–¥–∞—Ç—å" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}</button>
                <button type="button" onClick={closeModal}>–û—Ç–º–µ–Ω–∞</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default AdminPanel;
